//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: raft.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Raft_RaftClient`, then call methods of this protocol to make API calls.
internal protocol Raft_RaftClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Raft_RaftClientInterceptorFactoryProtocol? { get }

  func requestVote(
    _ request: Raft_RequestVote.Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Raft_RequestVote.Request, Raft_RequestVote.Response>

  func appendEntries(
    _ request: Raft_AppendEntries.Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Raft_AppendEntries.Request, Raft_AppendEntries.Response>
}

extension Raft_RaftClientProtocol {
  internal var serviceName: String {
    return "raft.Raft"
  }

  /// Vote/PreVote messages. Invoked by candidates to gather votes
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestVote(
    _ request: Raft_RequestVote.Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Raft_RequestVote.Request, Raft_RequestVote.Response> {
    return self.makeUnaryCall(
      path: "/raft.Raft/RequestVote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestVoteInterceptors() ?? []
    )
  }

  /// send an AppendEntries. Invoked by leader to replicate log entries (ยง5.3); also used as heartbeat (ยง5.2).
  ///
  /// - Parameters:
  ///   - request: Request to send to AppendEntries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func appendEntries(
    _ request: Raft_AppendEntries.Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Raft_AppendEntries.Request, Raft_AppendEntries.Response> {
    return self.makeUnaryCall(
      path: "/raft.Raft/AppendEntries",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendEntriesInterceptors() ?? []
    )
  }
}

internal protocol Raft_RaftClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'requestVote'.
  func makeRequestVoteInterceptors() -> [ClientInterceptor<Raft_RequestVote.Request, Raft_RequestVote.Response>]

  /// - Returns: Interceptors to use when invoking 'appendEntries'.
  func makeAppendEntriesInterceptors() -> [ClientInterceptor<Raft_AppendEntries.Request, Raft_AppendEntries.Response>]
}

internal final class Raft_RaftClient: Raft_RaftClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Raft_RaftClientInterceptorFactoryProtocol?

  /// Creates a client for the raft.Raft service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Raft_RaftClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Raft_RaftProvider: CallHandlerProvider {
  var interceptors: Raft_RaftServerInterceptorFactoryProtocol? { get }

  /// Vote/PreVote messages. Invoked by candidates to gather votes
  func requestVote(request: Raft_RequestVote.Request, context: StatusOnlyCallContext) -> EventLoopFuture<Raft_RequestVote.Response>

  /// send an AppendEntries. Invoked by leader to replicate log entries (ยง5.3); also used as heartbeat (ยง5.2).
  func appendEntries(request: Raft_AppendEntries.Request, context: StatusOnlyCallContext) -> EventLoopFuture<Raft_AppendEntries.Response>
}

extension Raft_RaftProvider {
  internal var serviceName: Substring { return "raft.Raft" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Raft_RequestVote.Request>(),
        responseSerializer: ProtobufSerializer<Raft_RequestVote.Response>(),
        interceptors: self.interceptors?.makeRequestVoteInterceptors() ?? [],
        userFunction: self.requestVote(request:context:)
      )

    case "AppendEntries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Raft_AppendEntries.Request>(),
        responseSerializer: ProtobufSerializer<Raft_AppendEntries.Response>(),
        interceptors: self.interceptors?.makeAppendEntriesInterceptors() ?? [],
        userFunction: self.appendEntries(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Raft_RaftServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'requestVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestVoteInterceptors() -> [ServerInterceptor<Raft_RequestVote.Request, Raft_RequestVote.Response>]

  /// - Returns: Interceptors to use when handling 'appendEntries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAppendEntriesInterceptors() -> [ServerInterceptor<Raft_AppendEntries.Request, Raft_AppendEntries.Response>]
}
