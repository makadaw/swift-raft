// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: raft.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Votes types
enum Raft_VoteType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case preVote // = 0
  case vote // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .preVote
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .preVote
    case 1: self = .vote
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .preVote: return 0
    case .vote: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Raft_VoteType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Raft_VoteType] = [
    .preVote,
    .vote,
  ]
}

#endif  // swift(>=4.2)

/// Invoked by candidates to gather votes or if they can win an election
struct Raft_RequestVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// vote type
    var type: Raft_VoteType = .preVote

    /// candidate’s term
    var term: UInt64 = 0

    /// candidate requesting vote
    var candidateID: UInt64 = 0

    /// index of candidate’s last log entry
    var lastLogIndex: UInt64 = 0

    /// term of candidate’s last log entry
    var lastLogTerm: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// vote type
    var type: Raft_VoteType = .preVote

    /// currentTerm, for candidate to update itself
    var term: UInt64 = 0

    /// true means candidate received vote
    var voteGranted: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// Raft message entry, can be a configuration entry or data (log, snapshot)
struct Raft_Entry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Invoked by leader to replicate log entries, also used as heartbeat
struct Raft_AppendEntries {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// leader’s term
    var term: UInt64 = 0

    /// so follower can redirect clients
    var leaderID: UInt64 = 0

    /// index of log entry immediately preceding new ones
    var prevLogIndex: UInt64 = 0

    /// term of prevLogIndex entry
    var prevLogTerm: UInt64 = 0

    /// log entries to store (empty for heartbeat; may send more than one for efficiency)
    var entries: [Raft_Entry] = []

    /// leader’s commitIndex
    var leaderCommit: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// currentTerm, for leader to update itself
    var term: UInt64 = 0

    /// true if follower contained entry matching prevLogIndex and prevLogTerm
    var success: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "raft"

extension Raft_VoteType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PreVote"),
    1: .same(proto: "Vote"),
  ]
}

extension Raft_RequestVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestVote"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_RequestVote, rhs: Raft_RequestVote) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_RequestVote.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Raft_RequestVote.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "term"),
    3: .same(proto: "candidateId"),
    4: .same(proto: "lastLogIndex"),
    5: .same(proto: "lastLogTerm"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.term) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.candidateID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.lastLogIndex) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.lastLogTerm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .preVote {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.term != 0 {
      try visitor.visitSingularUInt64Field(value: self.term, fieldNumber: 2)
    }
    if self.candidateID != 0 {
      try visitor.visitSingularUInt64Field(value: self.candidateID, fieldNumber: 3)
    }
    if self.lastLogIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastLogIndex, fieldNumber: 4)
    }
    if self.lastLogTerm != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastLogTerm, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_RequestVote.Request, rhs: Raft_RequestVote.Request) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.term != rhs.term {return false}
    if lhs.candidateID != rhs.candidateID {return false}
    if lhs.lastLogIndex != rhs.lastLogIndex {return false}
    if lhs.lastLogTerm != rhs.lastLogTerm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_RequestVote.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Raft_RequestVote.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "term"),
    3: .same(proto: "voteGranted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.term) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.voteGranted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .preVote {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.term != 0 {
      try visitor.visitSingularUInt64Field(value: self.term, fieldNumber: 2)
    }
    if self.voteGranted != false {
      try visitor.visitSingularBoolField(value: self.voteGranted, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_RequestVote.Response, rhs: Raft_RequestVote.Response) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.term != rhs.term {return false}
    if lhs.voteGranted != rhs.voteGranted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Entry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_Entry, rhs: Raft_Entry) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_AppendEntries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppendEntries"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_AppendEntries, rhs: Raft_AppendEntries) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_AppendEntries.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Raft_AppendEntries.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "leaderId"),
    3: .same(proto: "prevLogIndex"),
    4: .same(proto: "prevLogTerm"),
    5: .same(proto: "entries"),
    6: .same(proto: "leaderCommit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.term) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.leaderID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.prevLogIndex) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.prevLogTerm) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.leaderCommit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.term != 0 {
      try visitor.visitSingularUInt64Field(value: self.term, fieldNumber: 1)
    }
    if self.leaderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.leaderID, fieldNumber: 2)
    }
    if self.prevLogIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.prevLogIndex, fieldNumber: 3)
    }
    if self.prevLogTerm != 0 {
      try visitor.visitSingularUInt64Field(value: self.prevLogTerm, fieldNumber: 4)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 5)
    }
    if self.leaderCommit != 0 {
      try visitor.visitSingularUInt64Field(value: self.leaderCommit, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_AppendEntries.Request, rhs: Raft_AppendEntries.Request) -> Bool {
    if lhs.term != rhs.term {return false}
    if lhs.leaderID != rhs.leaderID {return false}
    if lhs.prevLogIndex != rhs.prevLogIndex {return false}
    if lhs.prevLogTerm != rhs.prevLogTerm {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.leaderCommit != rhs.leaderCommit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Raft_AppendEntries.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Raft_AppendEntries.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.term) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.term != 0 {
      try visitor.visitSingularUInt64Field(value: self.term, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Raft_AppendEntries.Response, rhs: Raft_AppendEntries.Response) -> Bool {
    if lhs.term != rhs.term {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
